@page "/weather"
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims;

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>
<p>UserID : @userID</p>
<p>User Name : @userName</p>
<p>User Email : @email</p>
<p>User Role(s) : @(roles.Any() ? string.Join(", ", roles) : "None")</p>

<AuthorizeView Roles="Admin, Manager">
    <NotAuthorized>
        You do not have authorization to view this content!  Please contact an admin for assistance.
    </NotAuthorized>

    <Authorized>
        <MudText Typo="Typo.h3" GutterBottom="true">Weather forecast</MudText>
        <MudText Typo="Typo.body1" Class="mb-8">This component demonstrates fetching data from the server.</MudText>


        @if (forecasts == null)
        {
            <MudProgressCircular Color="Color.Default" Indeterminate="true" />
        }
        else
        {
            <MudTable Items="forecasts" Hover="true" SortLabel="Sort By" Elevation="0" AllowUnsorted="false">
                <HeaderContent>
                    <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<WeatherForecast, object>(x=>x.Date)">Date</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<WeatherForecast, object>(x=>x.TemperatureC)">Temp. (C)</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<WeatherForecast, object>(x=>x.TemperatureF)">Temp. (F)</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<WeatherForecast, object>(x=>x.Summary!)">Summary</MudTableSortLabel></MudTh>
                </HeaderContent>
                <RowTemplate Context="weatherContext">
                    <MudTd DataLabel="Date">@weatherContext.Date</MudTd>
                    <MudTd DataLabel="Temp. (C)">@weatherContext.TemperatureC</MudTd>
                    <MudTd DataLabel="Temp. (F)">@weatherContext.TemperatureF</MudTd>
                    <MudTd DataLabel="Summary">@weatherContext.Summary</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[]{50, 100}" />
                </PagerContent>
            </MudTable>


            @if(AuthenticationStateProvider.GetAuthenticationStateAsync()
                   .Result.User.Identity.IsAuthenticated &&
               AuthenticationStateProvider.GetAuthenticationStateAsync()
                   .Result.User.IsInRole("Admin"))
            {
                <MudButton Variant="Variant.Outlined"  
                Color="Color.Primary"  OnClick="Blah">A Buttone Only Admins Can See</MudButton>
            }
        }
    </Authorized>
</AuthorizeView>

@code {

    private WeatherForecast[]? forecasts;

    private string? userID;
    private string? userName;
    private string? email;
    private List<string> roles = new();

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate a loading indicator
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if(user.Identity != null && user.Identity.IsAuthenticated)
        {
            userID = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            userName = user.Identity.Name;

            email = user.FindFirst(ClaimTypes.Email)?.Value;

            roles = user.FindAll(ClaimTypes.Role).Select(r => r.Value).ToList();
        }
    }

    private void Blah()
    {
        
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }


}
